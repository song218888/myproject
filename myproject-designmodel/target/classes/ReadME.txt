面向对象编程的四大特点和六大原则

四大特性分别是封装，继承，多态与抽象
1.封装：把对象的属性和方法结合成一个独立的整体，隐藏实现细节，并提供对外访问的接口。
	封装的好处：
    1：隐藏实现细节，好比你买了台电视机，你只需要怎么使用，并不用了解其实现原理。
    2：安全性，比如你在程序中私有化了age属性，并提供了对外的get和set方法，当外界 使用set方
           	法为属性设值的时候 你可以在set方法里面做个if判断，把值设值在0-80岁，那样他就不能随意赋值了。
	3：增加代码的复用性，好比在工具类中封装的各种方法，你可以在任意地方重复调用，而不用再每处都去实现其细节。
	4：模块化，封装分为属性封装，方法封装，类封装，插件封装，模块封装，系统封装等等。有利于程序的协助分工，互不干扰，方便了模块之间的相互组合与分解，也有利于代码的调试
			和维护。比如人体由各个器官所组成，如果有个器官出现问题，你只要去对这个器官进行医治就行了。

2.继承：从已知的一个类中派生出新的一个类叫子类。子类实现了父类所有非私有化属性和方法，并能根据自己的实际需求扩展出新的行为。
	继承的好处：
	1：继承是传递的，容易在其基础上构造，建立和扩充出新的类。
	2：简化了人们对事物的认识和描述，能清晰体现相关类之间的层次结构关系。
	3：能减少数据和代码的冗余度。
	4：大大增加了代码的维护性。

3.多态：多个不同的对象对同一消息作出响应，同一消息根据不同的对象而采用各种不同的行为方法。
	多态的好处：主要是利于扩展。直接上代码自己来体会。

4.抽象：通过特定的实例抽取出共同的特征以后形成的概念的过程，它强调主要特征和忽略次要特征



六大原则：
1：单一职责原则：需要修改某个类的时候原因有且只有一个，体现封装
2：开闭原则：对修改关闭，对扩展开放
3：依赖原则：高层模块不应该依赖于低层模块，二者都应该依赖于抽象，抽象不应该依赖于细节，细节应该依赖于抽象 
4：接口分离原则：不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口总要好
5：里氏替换原则：当一个子类的实例应该能够替换任何其超类的实例时，它们之间才具有is-A关系 
6：迪米特原则：最小知道原则

参考：https://www.cnblogs.com/geek6/p/3951677.html
参考，https://www.cnblogs.com/hnrainll/archive/2012/09/18/2690846.html
博客：http://www.runoob.com/design-pattern/factory-pattern.html
